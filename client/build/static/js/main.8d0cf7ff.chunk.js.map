{"version":3,"sources":["logo.svg","Teste.jsx","HomePage.jsx","AboutPage.jsx","ContactPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Botao","useState","variavel","setvariavel","callAPI","a","axiosInstance","axios","create","responseType","headers","timeout","get","response","console","log","data","helloWorld","BackEnd","FrontEnd","className","onClick","getMensage1","getMensage2","getMensage3","App","src","logo","alt","href","target","rel","to","id","path","component","AboutPage","ContactPage","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,4OCmD5BC,MAhDf,WAAkB,IAAD,EACgBC,mBAAS,WADzB,mBACTC,EADS,KACCC,EADD,cAGDC,IAHC,2EAGhB,8BAAAC,EAAA,6DACOC,EAAgBC,IAAMC,OAAO,CAClCC,aAAc,OACdC,QAAS,CAAE,eAAgB,oBAC3BC,QAAS,MAJX,SAOsBL,EAAcM,IAAI,gCAPxC,cAOKC,EAPL,OAQCC,QAAQC,IAAIF,EAASG,MARtB,kBASQH,GATR,4CAHgB,kEAehB,4BAAAR,EAAA,sEACsBD,IADtB,OACKS,EADL,OAECV,EAAYU,EAASG,KAAKC,YAF3B,4CAfgB,kEAoBhB,4BAAAZ,EAAA,sEACsBD,IADtB,OACKS,EADL,OAECV,EAAYU,EAASG,KAAKE,SAF3B,4CApBgB,kEAyBhB,4BAAAb,EAAA,sEACsBD,IADtB,OACKS,EADL,OAECV,EAAYU,EAASG,KAAKG,UAF3B,4CAzBgB,sBA8BhB,OACC,oCACC,2BAAIjB,GACJ,4BAAQkB,UAAU,MAAMC,QAAS,kBAjCnB,0CAiCyBC,KAAvC,cAIA,4BAAQF,UAAU,MAAMC,QAAS,kBArCnB,0CAqCyBE,KAAvC,WAIA,4BAAQH,UAAU,MAAMC,QAAS,kBAzCnB,0CAyCyBG,KAAvC,c,cC1CY,aACX,OACI,yBAAKJ,UAAU,QACX,6CACA,sDCJG,aACX,OACI,yBAAKA,UAAU,SACX,wCACA,2ECJG,aACX,OACI,yBAAKA,UAAU,WACX,uCACA,6EC6CGK,MA1Cf,WACC,OACC,yBAAKL,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKM,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzC,mCACM,4CADN,wBAGA,uBACCR,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJL,eAQA,kBAAC,EAAD,MAEA,yBAAKX,UAAU,cACd,kBAAC,IAAD,CAAMY,GAAG,KAAT,eAGD,yBAAKZ,UAAU,cACd,kBAAC,IAAD,CAAMY,GAAG,UAAT,YAGD,yBAAKZ,UAAU,cACd,kBAAC,IAAD,CAAMY,GAAG,YAAT,cAGD,0BAAMC,GAAG,QACR,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,IAClC,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWG,SC/BbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,KACC,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.8d0cf7ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction Botao() {\r\n\tconst [variavel, setvariavel] = useState(\"Inicial\");\r\n\r\n\tasync function callAPI() {\r\n\t\tconst axiosInstance = axios.create({\r\n\t\t\tresponseType: \"json\",\r\n\t\t\theaders: { \"content-type\": \"application/json\" },\r\n\t\t\ttimeout: 50000,\r\n\t\t});\r\n\r\n\t\tvar response = await axiosInstance.get(\"http://localhost:80/api/test\");\r\n\t\tconsole.log(response.data);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync function getMensage1() {\r\n\t\tvar response = await callAPI();\r\n\t\tsetvariavel(response.data.helloWorld);\r\n\t}\r\n\r\n\tasync function getMensage2() {\r\n\t\tvar response = await callAPI();\r\n\t\tsetvariavel(response.data.BackEnd);\r\n\t}\r\n\r\n\tasync function getMensage3() {\r\n\t\tvar response = await callAPI();\r\n\t\tsetvariavel(response.data.FrontEnd);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{variavel}</p>\r\n\t\t\t<button className=\"btn\" onClick={() => getMensage1()}>\r\n\t\t\t\thelloWorld\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"btn\" onClick={() => getMensage2()}>\r\n\t\t\t\tBackEnd\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"btn\" onClick={() => getMensage3()}>\r\n\t\t\t\tFrontEnd\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Botao;\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"home\">\r\n            <h1>The home page</h1>\r\n            <p>This is the home page</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"about\">\r\n            <h1>About me</h1>\r\n            <p>In this page there are somethings about me</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"contact\">\r\n            <h1>Contact</h1>\r\n            <p>Do you need to talk to me? Access this page!</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Test from \"./Teste\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport HomePage from \"./HomePage\";\nimport AboutPage from \"./AboutPage\";\nimport ContactPage from \"./ContactPage\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>\n\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\n\t\t\t\t</p>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tLearn React\n\t\t\t\t</a>\n\t\t\t\t<Test />\n\n\t\t\t\t<div className=\"linkNavBar\">\n\t\t\t\t\t<Link to=\"/\">Home Page </Link>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"linkNavBar\">\n\t\t\t\t\t<Link to=\"/About\"> About </Link>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"linkNavBar\">\n\t\t\t\t\t<Link to=\"/Contact\"> Contact </Link>\n\t\t\t\t</div>\n\n\t\t\t\t<main id=\"main\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/About\" component={AboutPage} />\n\t\t\t\t\t\t<Route path=\"/Contact\" component={ContactPage} />\n\t\t\t\t\t\t<Route path=\"/\" component={HomePage} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</main>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}