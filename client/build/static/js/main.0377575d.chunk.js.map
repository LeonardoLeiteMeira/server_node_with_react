{"version":3,"sources":["logo.svg","Teste.jsx","HomePage.jsx","AboutPage.jsx","ContactPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Botao","useState","variavel","setvariavel","callAPI","a","axiosInstance","axios","create","responseType","headers","timeout","get","response","console","log","data","helloWorld","BackEnd","FrontEnd","className","onClick","getMensage1","getMensage2","getMensage3","App","src","logo","alt","href","target","rel","to","id","path","component","AboutPage","ContactPage","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,4OCqD5BC,MAlDf,WAAkB,IAAD,EACgBC,mBAAS,WADzB,mBACTC,EADS,KACCC,EADD,cAGDC,IAHC,2EAGhB,8BAAAC,EAAA,6DACOC,EAAgBC,IAAMC,OAAO,CAClCC,aAAc,OACdC,QAAS,CAAE,eAAgB,oBAC3BC,QAAS,MAJX,SAOsBL,EAAcM,IAClC,IARF,cAOKC,EAPL,OAUCC,QAAQC,IAAIF,EAASG,MAVtB,kBAWQH,GAXR,4CAHgB,kEAiBhB,4BAAAR,EAAA,sEACsBD,IADtB,OACKS,EADL,OAECV,EAAYU,EAASG,KAAKC,YAF3B,4CAjBgB,kEAsBhB,4BAAAZ,EAAA,sEACsBD,IADtB,OACKS,EADL,OAECV,EAAYU,EAASG,KAAKE,SAF3B,4CAtBgB,kEA2BhB,4BAAAb,EAAA,sEACsBD,IADtB,OACKS,EADL,OAECV,EAAYU,EAASG,KAAKG,UAF3B,4CA3BgB,sBAgChB,OACC,oCACC,2BAAIjB,GACJ,4BAAQkB,UAAU,MAAMC,QAAS,kBAnCnB,0CAmCyBC,KAAvC,oBAIA,4BAAQF,UAAU,MAAMC,QAAS,kBAvCnB,0CAuCyBE,KAAvC,WAIA,4BAAQH,UAAU,MAAMC,QAAS,kBA3CnB,0CA2CyBG,KAAvC,c,cC5CY,aACX,OACI,yBAAKJ,UAAU,QACX,6CACA,sDCJG,aACX,OACI,yBAAKA,UAAU,SACX,wCACA,2ECJG,aACX,OACI,yBAAKA,UAAU,WACX,uCACA,6EC6CGK,MA1Cf,WACC,OACC,yBAAKL,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKM,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzC,mCACM,4CADN,wBAGA,uBACCR,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJL,eAQA,kBAAC,EAAD,MAEA,yBAAKX,UAAU,cACd,kBAAC,IAAD,CAAMY,GAAG,KAAT,eAGD,yBAAKZ,UAAU,cACd,kBAAC,IAAD,CAAMY,GAAG,UAAT,YAGD,yBAAKZ,UAAU,cACd,kBAAC,IAAD,CAAMY,GAAG,YAAT,cAGD,0BAAMC,GAAG,QACR,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,IAClC,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWG,SC/BbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,KACC,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.0377575d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction Botao() {\r\n\tconst [variavel, setvariavel] = useState(\"Inicial\");\r\n\r\n\tasync function callAPI() {\r\n\t\tconst axiosInstance = axios.create({\r\n\t\t\tresponseType: \"json\",\r\n\t\t\theaders: { \"content-type\": \"application/json\" },\r\n\t\t\ttimeout: 50000,\r\n\t\t});\r\n\r\n\t\tvar response = await axiosInstance.get(\r\n\t\t\t\"\" // \"https://testedeploycommit.herokuapp.com/api/test\"\r\n\t\t);\r\n\t\tconsole.log(response.data);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync function getMensage1() {\r\n\t\tvar response = await callAPI();\r\n\t\tsetvariavel(response.data.helloWorld);\r\n\t}\r\n\r\n\tasync function getMensage2() {\r\n\t\tvar response = await callAPI();\r\n\t\tsetvariavel(response.data.BackEnd);\r\n\t}\r\n\r\n\tasync function getMensage3() {\r\n\t\tvar response = await callAPI();\r\n\t\tsetvariavel(response.data.FrontEnd);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{variavel}</p>\r\n\t\t\t<button className=\"btn\" onClick={() => getMensage1()}>\r\n\t\t\t\thelloWorld teste\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"btn\" onClick={() => getMensage2()}>\r\n\t\t\t\tBackEnd\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className=\"btn\" onClick={() => getMensage3()}>\r\n\t\t\t\tFrontEnd\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Botao;\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"home\">\r\n            <h1>The home page</h1>\r\n            <p>This is the home page</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"about\">\r\n            <h1>About me</h1>\r\n            <p>In this page there are somethings about me</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"contact\">\r\n            <h1>Contact</h1>\r\n            <p>Do you need to talk to me? Access this page!</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Test from \"./Teste\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport HomePage from \"./HomePage\";\r\nimport AboutPage from \"./AboutPage\";\r\nimport ContactPage from \"./ContactPage\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header className=\"App-header\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<p>\r\n\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\r\n\t\t\t\t</p>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName=\"App-link\"\r\n\t\t\t\t\thref=\"https://reactjs.org\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t>\r\n\t\t\t\t\tLearn React\r\n\t\t\t\t</a>\r\n\t\t\t\t<Test />\r\n\r\n\t\t\t\t<div className=\"linkNavBar\">\r\n\t\t\t\t\t<Link to=\"/\">Home Page </Link>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"linkNavBar\">\r\n\t\t\t\t\t<Link to=\"/About\"> About </Link>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"linkNavBar\">\r\n\t\t\t\t\t<Link to=\"/Contact\"> Contact </Link>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<main id=\"main\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/About\" component={AboutPage} />\r\n\t\t\t\t\t\t<Route path=\"/Contact\" component={ContactPage} />\r\n\t\t\t\t\t\t<Route path=\"/\" component={HomePage} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</main>\r\n\t\t\t</header>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<BrowserRouter>\r\n\t\t\t<App />\r\n\t\t</BrowserRouter>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}